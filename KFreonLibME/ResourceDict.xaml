<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:KFreonLibME"
                    xmlns:resil="clr-namespace:ResIL.Unmanaged;assembly=ResILWrapper"
                    xmlns:localTexture="clr-namespace:KFreonLibME.Textures"
                    xmlns:useful="clr-namespace:UsefulThings.WPF;assembly=UsefulThings" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d">

    <!--Global dictionary of useful styles and stuff-->

    <!-- Specifies my bool? to Visibility converter -->
    <useful:BoolToVisibilityConverter x:Key="BoolToVisConverter"/>
    <useful:InverseBooleanConverter x:Key="InverseBoolConverter"/>
    <useful:MultiIntConverter x:Key="MultiIntConverter"/>
    <useful:StringToIntConverter x:Key="StringToIntConverter"/>
    <useful:StringToUriConverter x:Key="UriConverter"/>
    <useful:VisibilitySourceNullConverter x:Key="VisibiltySourceNullConverter"/>
    <useful:ByteSizeToStringConverter x:Key="FileSizeToStringConverter"/>
    <useful:IntsEqualConverter x:Key="IntsEqualConverter"/>
    <useful:DebugConverter x:Key="DebugConverter"/>
    <local:HashToStringConverter x:Key="HashToStringConverter"/>
    <useful:EnumToStringConverter x:Key="EnumToStringConverter"/>
    <useful:MutuallyExclusiveCheckersConverter x:Key="MutuallyExclusiveCheckerConverter"/>
    <DropShadowEffect x:Key="TreeButtonEffect" BlurRadius="12" ShadowDepth="0" Opacity="1" Color="Blue"/>


    <BitmapImage x:Key="Folder_Closed" UriSource="Resources/Folder_Closed.png" DecodePixelHeight="32"/>
    <BitmapImage x:Key="Folder_Open" UriSource="Resources/Folder_Open.png" DecodePixelHeight="32"/>
    <BitmapImage x:Key="DefaultTexture" UriSource="Resources/Placeholder.png" DecodePixelHeight="64"/>
    <BitmapImage x:Key="DefaultMesh" UriSource="Resources/DefaultMesh.png" DecodePixelHeight="64"/>
    <BitmapImage x:Key="DefaultText" UriSource="Resources/DefaultText.png" DecodePixelHeight="64"/>

    <!-- Boolean values for use as converter parameters -->
    <s:Boolean x:Key="True">True</s:Boolean>
    <s:Boolean x:Key="False">False</s:Boolean>

    <!-- General Styles/Theme -->
    <Style TargetType="{x:Type Button}" x:Key="GeneralButtonStyle">
        <Setter Property="Background" Value="White"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Margin" Value="3,0"/>
    </Style>

    <Style TargetType="{x:Type Window}" x:Key="GeneralWindowStyle">
        <Setter Property="Background" Value="White"/>
    </Style>


    <!-- Internal button style that has a different hover colour -->
    <Style TargetType="{x:Type Button}" x:Key="InternalButtonStyle">
        <Setter Property="Margin" Value="3,0"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="Black">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="7,1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGreen"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Template for when invalid text entered into TextBox, puts a red ! at the front of the TextBox and a red border around it. -->
    <ControlTemplate x:Key="TextBoxValidationTemplate">
        <StackPanel Orientation="Horizontal">
            <TextBlock Foreground="Red" FontSize="20" Text="!" Margin="5,0"/>
            <Border BorderBrush="Red" BorderThickness="2" HorizontalAlignment="Left">
                <AdornedElementPlaceholder x:Name="ErrorAdorner"/>
            </Border>
        </StackPanel>
    </ControlTemplate>


    <!-- TextBox Style for handling validation -->
    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxInError">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors).CurrentItem.ErrorContent, RelativeSource={x:Static RelativeSource.Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Template for displaying editable pathing information on a game -->
    <DataTemplate x:Key="PathEditTemplate">
        <StackPanel>
            <StackPanel Orientation="Horizontal">
                <Image Source="{Binding ImageURI}" Margin="0,0,10,0" VerticalAlignment="Top"/>
                <StackPanel Margin="0,0,0,35">
                    <Label Content="{Binding TitleText}" HorizontalContentAlignment="Center" FontWeight="Bold" Foreground="#FF0068FF" FontSize="18" FontFamily="Arial"/>
                    <CheckBox Content="Allow extra path modification?" IsChecked="{Binding AllowExtraMods}"/>

                    <StackPanel>
                        <DockPanel LastChildFill="True">
                            <Label Content="Exe Path:" HorizontalAlignment="Left"  VerticalAlignment="Top" DockPanel.Dock="Left"/>
                            <Button x:Name="ExeBrowse" Content="Browse" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75" DockPanel.Dock="Right" Margin="5,0,0,0" Command="{Binding ExeBrowseCommand}"/>
                            <TextBox Height="23" TextWrapping="Wrap" Text="{Binding ExePath}" VerticalAlignment="Top" DockPanel.Dock="Left"/>
                        </DockPanel>
                    </StackPanel>


                    <StackPanel>
                        <DockPanel LastChildFill="True">
                            <Label Content="BIOGame:" HorizontalAlignment="Left"  VerticalAlignment="Top" DockPanel.Dock="Left"/>
                            <Button x:Name="BIOGameBrowse" Content="Browse" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75" DockPanel.Dock="Right" Margin="5,0,0,0" Command="{Binding BIOGameBrowseCommand}" IsEnabled="{Binding AllowExtraMods}"/>
                            <TextBox Height="23" TextWrapping="Wrap" Text="{Binding BIOGamePath}" VerticalAlignment="Top" DockPanel.Dock="Left" IsEnabled="{Binding AllowExtraMods}"/>
                        </DockPanel>
                    </StackPanel>

                    <StackPanel>
                        <DockPanel LastChildFill="True">
                            <Label Content="Cooked:" HorizontalAlignment="Left"  VerticalAlignment="Top" DockPanel.Dock="Left"/>
                            <Button x:Name="CookedBrowse" Content="Browse" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75" DockPanel.Dock="Right" Margin="5,0,0,0" Command="{Binding CookedBrowseCommand}" IsEnabled="{Binding AllowExtraMods}"/>
                            <TextBox Height="23" TextWrapping="Wrap" Text="{Binding CookedPath}" VerticalAlignment="Top" DockPanel.Dock="Left" IsEnabled="{Binding AllowExtraMods}"/>
                        </DockPanel>
                    </StackPanel>


                    <StackPanel>
                        <DockPanel LastChildFill="True">
                            <Label Content="DLC Path:" HorizontalAlignment="Left"  VerticalAlignment="Top" DockPanel.Dock="Left"/>
                            <Button x:Name="DLCBrowse" Content="Browse" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75" DockPanel.Dock="Right" Margin="5,0,0,0" Command="{Binding DLCBrowseCommand}" IsEnabled="{Binding AllowExtraMods}"/>
                            <TextBox Height="23" TextWrapping="Wrap" Text="{Binding DLCPath}" VerticalAlignment="Top" DockPanel.Dock="Left" IsEnabled="{Binding AllowExtraMods}"/>
                        </DockPanel>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
            <Label Content="Detected DLC's" FontWeight="Bold" Margin="0,10,0,0"/>
            <ListBox ItemsSource="{Binding DLCs}"/>
        </StackPanel>
    </DataTemplate>



    <Style TargetType="{x:Type Button}" x:Key="Indicators">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="Red"/>
        <Setter Property="Margin" Value="2,0,2,0"/>
    </Style>


    <!-- Style for displaying Game existence indicator 1 -->
    <Style TargetType="{x:Type Button}" x:Key="Game1Indicator" BasedOn="{StaticResource Indicators}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding MEExDirecs.DoesGame1Exist}" Value="True">
                <Setter Property="Foreground" Value="LawnGreen"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Extended style overriding trigger binding for Game indicator 2 -->
    <Style x:Key="Game2Indicator"  TargetType="{x:Type Button}" BasedOn="{StaticResource Indicators}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding MEExDirecs.DoesGame2Exist}" Value="True">
                <Setter Property="Foreground" Value="LawnGreen"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Extended style overriding trigger binding for Game indicator 3 -->
    <Style x:Key="Game3Indicator"  TargetType="{x:Type Button}" BasedOn="{StaticResource Indicators}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding MEExDirecs.DoesGame3Exist}" Value="True">
                <Setter Property="Foreground" Value="LawnGreen"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Extended style overriding trigger binding for Tree indicator 1 -->
    <Style x:Key="TreeIndicator"  TargetType="{x:Type Button}" BasedOn="{StaticResource Indicators}">
        <Setter Property="Command" Value="{Binding SelectCommand}"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Valid}" Value="True">
                <Setter Property="Foreground" Value="LawnGreen"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                <Setter Property="Effect" Value="{StaticResource TreeButtonEffect}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBox" x:Key="SearchBox">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="300"/>
        <Setter Property="Margin" Value="3,0"/>
    </Style>

    <ControlTemplate TargetType="{x:Type TextBox}" x:Key="SearchBoxTemplate">
        <Grid Width="{TemplateBinding Width}">
            <TextBox Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Busy, Converter={StaticResource InverseBoolConverter}}" VerticalContentAlignment="Center"/>
            <TextBlock HorizontalAlignment="Left"
				VerticalAlignment="Center"
				Text="{TemplateBinding Tag}"
                Margin="3,0"
				Foreground="#FFA4A4A4"
				IsHitTestVisible="False"
				x:Name="UserMessage"
                Visibility="Hidden"/>
        </Grid>
        
        <ControlTemplate.Triggers>
            <Trigger Property="Text" Value="">
                <Setter Property="Visibility" TargetName="UserMessage" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <DataTemplate x:Key="PCCExpIDListTemplate">
        <StackPanel Orientation="Horizontal">
            <CheckBox IsChecked="{Binding Using}"/>
            <TextBox Style="{StaticResource TextBoxInError}" Background="Transparent" Validation.ErrorTemplate="{StaticResource TextBoxValidationTemplate}">
                <Binding Path="File" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <useful:TextBoxValidation/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>

            <TextBlock Text="@" Margin="5,0"/>

            <TextBox Style="{StaticResource TextBoxInError}" Validation.ErrorTemplate="{StaticResource TextBoxValidationTemplate}" Background="Transparent">
                <Binding Path="ExpID" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <useful:TextBoxValidation RequireExistence="True"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
        </StackPanel>
    </DataTemplate>

    <Style x:Key="KFreonStatusBar" TargetType="{x:Type StatusBar}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Background" Value="{x:Null}"/>
    </Style>

    <ControlTemplate TargetType="{x:Type StatusBarItem}" x:Key="VersionCancelTemplate">
        <StatusBarItem HorizontalAlignment="Right">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                <StackPanel.Resources>
                    <Style TargetType="{x:Type StatusBarItem}">
                        <Setter Property="Foreground" Value="#FF8B8B8B"/>
                    </Style>
                </StackPanel.Resources>

                <StatusBarItem Content="Memory Usage:" FontStyle="Italic"/>
                <StatusBarItem Content="{Binding MemoryUsage}" Margin="0,0,10,0" FontStyle="Italic"/>

                <StatusBarItem Content="{Binding Version}" Height="35" VerticalAlignment="Center" HorizontalAlignment="Left"/>

                <StatusBarItem VerticalAlignment="Center">
                    <Rectangle Stroke="#FF8B8B8B" Height="17" Margin="3,0,3,0"/>
                </StatusBarItem>

                <StatusBarItem Content="WV, AK, Salt, Gibbed = The Real Heros" Height="30" VerticalAlignment="Center" HorizontalAlignment="Right"/>

                <StatusBarItem Visibility="{Binding Busy, Converter={StaticResource BoolToVisConverter}}">
                    <Button x:Name="CancelEverythingButton" Width="50" Content="Cancel" Command="{Binding CancelEverythingCommand}"/>
                </StatusBarItem>
            </StackPanel>
        </StatusBarItem>
    </ControlTemplate>

    <ControlTemplate x:Key="GameIndicators">
        <StackPanel Orientation="Horizontal">
            <Label Content="Game Status:" VerticalAlignment="Center"/>
            <Button x:Name="OneButton" Content="1" Style="{StaticResource Game1Indicator}" Command="{Binding ShowGameInfoCommand}" CommandParameter="1"/>
            <Button x:Name="TwoButton" Content="2" Style="{StaticResource Game2Indicator}" Command="{Binding ShowGameInfoCommand}" CommandParameter="2"/>
            <Button x:Name="ThreeButton" Content="3" Style="{StaticResource Game3Indicator}" Command="{Binding ShowGameInfoCommand}" CommandParameter="3"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="TreeIndicators">
        <StackPanel Orientation="Horizontal">
            <Label Content="Tree Status" Margin="20,0,0,0" VerticalAlignment="Center"/>
            <Button Content="1" Style="{StaticResource TreeIndicator}" DataContext="{Binding Trees[0]}"/>
            <Button Content="2" Style="{StaticResource TreeIndicator}" DataContext="{Binding Trees[1]}"/>
            <Button Content="3" Style="{StaticResource TreeIndicator}" DataContext="{Binding Trees[2]}"/>
        </StackPanel>
    </ControlTemplate>


    <Style TargetType="{x:Type TextBlock}" x:Key="NameStyle">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Margin" Value="5"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Valid}" Value="False">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type StackPanel}" x:Key="ButtonPanelStyle">
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=Top}" Value="True"/>
                    <Condition Binding="{Binding DataContext.MultiSelected, RelativeSource={RelativeSource AncestorType={x:Type Window}, Mode=FindAncestor}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation To="1" From="0" Storyboard.TargetProperty="Opacity" Duration="0:0:0.2"/>
                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible">
                                <DiscreteBooleanKeyFrame KeyTime="0:0:0.3" Value="True"/>
                            </BooleanAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>

                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation To="0" Storyboard.TargetProperty="Opacity" Duration="0:0:0.0001"/>
                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible">
                                <DiscreteBooleanKeyFrame KeyTime="0" Value="False"/>
                            </BooleanAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" x:Key="ListBoxContainerStyle">
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
    </Style>
</ResourceDictionary>